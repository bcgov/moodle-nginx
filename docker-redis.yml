services:
  nginx-redis:
    image: nginx:latest
    restart: no
    # build:
    #   context: ./config/nginx
    #   args:
    #     ENABLED_MODULES: ngx_stream_js_module
    # ports:
    #   - "6379:6379"
    #   - "8089:8080"
    volumes:
      # - ./config/nginx/redis_proxy.conf:/etc/nginx/conf.d/default.conf:delegated
      - ./config/nginx/redis_proxy.conf:/etc/nginx/nginx.conf:delegated

  redis-proxy:
    container_name: redis-proxy
    deploy:
      replicas: 1
    tty: true
    restart: no
    ports:
      - "6450:6450"
    networks:
      static-network:
        ipv4_address: 172.19.0.3
    env_file:
      - example.env
    build:
      context: ./config/redis
      dockerfile: GoLang.Dockerfile

  redis:
    image: redis:latest
    restart: no
    env_file:
      - example.env
    volumes:
      - ./data/primary:/data
      - ./config/redis/redis-local.conf:/etc/redis/redis.conf

  redis-primary:
    extends:
      service: redis
    container_name: redis-primary
    hostname: redis-primary
    ports:
      - "6379:6379"
    expose:
      - "6379"
    networks:
      static-network:
        ipv4_address: 172.19.0.10
    command:
      [
        "redis-server",
        "--appendonly",
        "yes",
        "--repl-diskless-load",
        "on-empty-db",
        "--replica-announce-ip",
        "172.19.0.10",
        # "--requirepass ",
        # "local-example",
        "--replica-announce-port",
        "6382",
        "--protected-mode",
        "no",
        "--enable-debug-command",
        "yes"
      ]

  redis-secondary-1:
    extends:
      service: redis
    container_name: redis-secondary-1
    hostname: redis-secondary-1
    ports:
      - "6380:6379"
    expose:
      - "6380"
    networks:
      static-network:
        ipv4_address: 172.19.0.14
    volumes:
      - ./temp/data/secondary1:/data
    command:
      [
        "redis-server",
        "--appendonly",
        "yes",
        "--replicaof",
        "172.19.0.10",
        "6379",
        "--repl-diskless-load",
        "on-empty-db",
        "--replica-announce-ip",
        "172.19.0.14",
        "--replica-announce-port",
        "6380",
        "--protected-mode",
        "no"
      ]

  redis-secondary-2:
    extends:
      service: redis
    container_name: redis-secondary-2
    hostname: redis-secondary-2
    restart: no
    ports:
      - "6381:6379"
    expose:
      - "6381"
    networks:
      static-network:
        ipv4_address: 172.19.0.15
    volumes:
      - ./data/secondary2:/data
    command:
      [
        "redis-server",
        "--appendonly",
        "yes",
        "--replicaof",
        "172.19.0.10",
        "6379",
        "--repl-diskless-load",
        "on-empty-db",
        "--replica-announce-ip",
        "172.19.0.15",
        "--replica-announce-port",
        "6381",
        "--protected-mode",
        "no"
      ]

  sentinel:
    extends:
      service: redis
    container_name: sentinel-1
    hostname: sentinel-1
    ports:
      - "26379:26379"
    expose:
      - "26379"
    networks:
      static-network:
        ipv4_address: 172.19.0.9
    environment:
      - SENTINEL_DOWN_AFTER=5000
      - SENTINEL_FAILOVER=5000
    command: >
      sh -c 'echo "bind 0.0.0.0" > /etc/sentinel.conf &&
        echo "sentinel monitor mymaster $${REDIS_HOST_IP} 6379 2" >> /etc/sentinel.conf &&
        echo "sentinel announce-ip 172.19.0.9" >> /etc/sentinel.conf &&
        echo "sentinel announce-port 26379" >> /etc/sentinel.conf &&
        echo "sentinel resolve-hostnames yes" >> /etc/sentinel.conf &&
        echo "sentinel down-after-milliseconds mymaster 5000" >> /etc/sentinel.conf &&
        echo "sentinel failover-timeout mymaster 5000" >> /etc/sentinel.conf &&
        echo "sentinel parallel-syncs mymaster 1" >> /etc/sentinel.conf &&
        redis-sentinel /etc/sentinel.conf'

  sentinel-2:
    extends:
      service: redis
    container_name: sentinel-2
    hostname: sentinel-2
    ports:
      - "26380:26382"
    networks:
      static-network:
        ipv4_address: 172.19.0.7
    environment:
      - SENTINEL_DOWN_AFTER=5000
      - SENTINEL_FAILOVER=5000
    command: >
      sh -c 'echo "bind 0.0.0.0" > /etc/sentinel.conf &&
        echo "sentinel monitor mymaster $${REDIS_HOST_IP} 6379 2" >> /etc/sentinel.conf &&
        echo "sentinel resolve-hostnames yes" >> /etc/sentinel.conf &&
        echo "sentinel announce-ip 172.19.0.7" >> /etc/sentinel.conf &&
        echo "sentinel announce-port 26380" >> /etc/sentinel.conf &&
        echo "sentinel down-after-milliseconds mymaster 5000" >> /etc/sentinel.conf &&
        echo "sentinel failover-timeout mymaster 5000" >> /etc/sentinel.conf &&
        echo "sentinel parallel-syncs mymaster 1" >> /etc/sentinel.conf &&
        redis-sentinel /etc/sentinel.conf'

  sentinel-3:
    extends:
      service: redis
    container_name: sentinel-3
    hostname: sentinel-3
    ports:
      - "26381:26379"
    networks:
      static-network:
        ipv4_address: 172.19.0.12
    environment:
      - SENTINEL_DOWN_AFTER=5000
      - SENTINEL_FAILOVER=5000
    command: >
      sh -c 'echo "bind 0.0.0.0" > /etc/sentinel.conf &&
        echo "sentinel monitor mymaster $${REDIS_HOST_IP} 6379 2" >> /etc/sentinel.conf &&
        echo "sentinel resolve-hostnames yes" >> /etc/sentinel.conf &&
        echo "sentinel announce-ip 172.19.0.12" >> /etc/sentinel.conf &&
        echo "sentinel announce-port 26381" >> /etc/sentinel.conf &&
        echo "sentinel down-after-milliseconds mymaster 5000" >> /etc/sentinel.conf &&
        echo "sentinel failover-timeout mymaster 5000" >> /etc/sentinel.conf &&
        echo "sentinel parallel-syncs mymaster 1" >> /etc/sentinel.conf &&
        redis-sentinel /etc/sentinel.conf'

  redisinsight:
    image: redis/redisinsight:latest
    restart: no
    ports:
      - "5540:5540"
    networks:
      static-network:
        ipv4_address: 172.19.0.11

# Static Deploy On Openshift
# Builds and Deploys merged PR's to persistent pods/services/routes/etc in the OpenShift Dev environment.
name: Deploy on Openshift

env:
  PROJECT: e66ac2
  APP: moodle
  DB_BACKUP_APP: db-backup
  BUILD_ID: ${{ github.event.number }}
  BRANCH: ${{ github.ref_name }}
  DB_HOST: db-0.mysql
  APP_HOST: moodle-${{ github.ref_name }}-$PROJECT.apps.silver.devops.gov.bc.ca

on:
  push:
    branches:
      - dev
      - test
      - prod

jobs:
  #Print variables for logging and debugging purposes
  checkEnv:
    name: Check Env variables
    runs-on: ubuntu-latest
    steps:
      - name: Print Env Vars
        run: |
          echo Git Base Ref: ${{ github.base_ref }}
          echo Git Build ID: ${{ github.event.number }}
          echo Git Pull Request Ref: ${{ github.event.pull_request.head.sha }}
          echo OC CLI Version: $(oc version)
          echo Git Branch name: ${{ github.ref_name }}

  #Build the app

  build:
    name: Build Moodle
    runs-on: ubuntu-latest
    if: github.ref_name == 'dev' || github.ref_name  == 'test' || github.ref_name  == 'prod'
    env:
      BUILD_NAMESPACE: $PROJECT-tools
      DEPLOY_NAMESPACE: $PROJECT-$BRANCH
    steps:
      # Checkout the PR branch
      - name: Print env
        run: |
          echo BUILD ID: $BUILD_ID
          echo BUILD NAMESPACE: $BUILD_NAMESPACE
          echo BRANCH: $BRANCH
      - name: Checkout Target Branch
        uses: actions/checkout@v1
      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift (tools)
        run: |
          oc login --token=${{ secrets.SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Build the app images
      - name: Build App images
        working-directory: "./openshift"
        run: |
          test -n "$BRANCH"
          test -n "${BUILD_NAMESPACE}"
          echo "BUILIDING ${APP} with tag: $BRANCH"
            oc -n ${BUILD_NAMESPACE} process -f docker-build.yml \
            -p DEPLOY_NAMESPACE=$DEPLOY_NAMESPACE \
            -p APP_NAME=${APP} | oc -n ${BUILD_NAMESPACE} apply -f -
          oc -n ${BUILD_NAMESPACE} start-build bc/${APP} --no-cache --wait

  # Deploy App
  deploy:
    name: Deploy APP
    runs-on: ubuntu-latest
    if: github.ref_name == 'dev' || github.ref_name  == 'test' || github.ref_name  == 'prod'
    env:
      DEPLOY_NAMESPACE: $PROJECT-$BRANCH
      BUILD_NAMESPACE: $PROJECT-tools
      IMAGE_NAME: $APP-$BRANCH
    needs:
      - build
    steps:
      - name: Checkout Target Branch
        uses: actions/checkout@v1

       # Log in to OpenShift.
       # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
       # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift ( ${{ github.ref_name }} )
        run: |
          oc login --token=${{ format('AUTH_TOKEN_{0}', github.ref_name) }} --server=https://api.silver.devops.gov.bc.ca:6443

      - name: Deploy APP
        run: |
          test -n "$DEPLOY_NAMESPACE"
          test -n "$BRANCH"
          echo "Current namespace is $DEPLOY_NAMESPACE"
          oc -n $DEPLOY_NAMESPACE process -f openshift/moodle-dc-persistent-template.json \
                -p APP_NAME=${APP} \
                -p SITE_URL=$APP_HOST \
                -p DB_SERVICE_NAME=$DB_HOST \
                -p DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
                -p BUILD_NAMESPACE=$BUILD_NAMESPACE \
                -p IMAGE_STREAM_TAG=$IMAGE_NAME | \
          oc -n $BUILD_NAMESPACE apply -f -
          oc rollout latest dc/moodle -n $BUILD_NAMESPACE
          # Check deployment rollout status every 10 seconds (max 10 minutes) until complete.
          ATTEMPTS=0
          ROLLOUT_STATUS_CMD="oc rollout status dc/moodle -n $BUILD_NAMESPACE"
          until $ROLLOUT_STATUS_CMD || [ $ATTEMPTS -eq 60 ]; do
            $ROLLOUT_STATUS_CMD
            ATTEMPTS=$((attempts + 1))
            sleep 10
          done
          oc project $BUILD_NAMESPACE
          echo "Listing pods.."
          oc get pods|grep moodle
          sleep 30
          oc get pods -l deploymentconfig=moodle --field-selector=status.phase=Running -o name
          sleep 20
          podNames=$(oc get pods -l deploymentconfig=moodle --field-selector=status.phase=Running -o name)
          pwd
          ls -lrt .env
          echo $podNames
          for name in $podNames; do
            oc exec $podNames -- bash -c "
              cat <<- EOF > .env
              DB_PASSWORD=${{ secrets.DB_PASSWORD }}
              SSL_PROXY=true
              SITE_URL=$APP_HOST
              DB_HOST=$DB_HOST
              `EOF` "
          done
          export ROUTE="$(oc get route moodle -o jsonpath='{.spec.host}')"
          echo "${APP} is exposed at 'https://'${ROUTE}"
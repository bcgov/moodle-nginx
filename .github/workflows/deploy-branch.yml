# Static Deploy On Openshift
# Builds and Deploys merged PR's to persistent pods/services/routes/etc in the OpenShift Dev environment.
name: Deploy on Openshift

env:
  PROJECT: e66ac2
  APP: moodle
  USER: ${{ github.actor }}

  BASE_IMAGE_TAG: ${{ github.ref_name }}

  BUILD_NAMESPACE: ${{ vars.OPENSHIFT_DEPLOY_PROJECT }}-tools
  DEPLOY_NAMESPACE: ${{ vars.OPENSHIFT_DEPLOY_PROJECT }}-${{ github.ref_name }}

  BUILD_ID: ${{ github.event.number }}
  BRANCH: ${{ github.ref_name }}
  SOURCE_REPOSITORY_URL: "https://github.com/${{ github.repository }}"
  INSPECT_JOB_URL: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  BUILD_ICON_URL: https://cdn-icons-png.flaticon.com/128/5110/5110294.png
  SUCCESS_ICON_URL: https://cdn-icons-png.flaticon.com/128/1356/1356479.png
  FAIL_ICON_URL: https://www.flaticon.com/free-icon/rocket_6818114

  # Paths to find dockerfiles for builds
  PHP_SOURCE_CONTEXT_DIR: ./
  PHP_DOCKER_FILE_PATH: "PHP.Dockerfile"

on:
  push:
    branches:
      - dev
      - test
      - prod

jobs:
  #Print variables for logging and debugging purposes
  checkEnv:
    name: Check Env variables
    runs-on: ubuntu-latest
    steps:
      - name: Print Env Vars
        run: |
          echo Git Base Ref: ${{ github.base_ref }}
          echo Git Build ID: ${{ github.event.number }}
          echo Git Pull Request Ref: ${{ github.event.pull_request.head.sha }}
          echo OC CLI Version: $(oc version)
          echo Git Branch name: ${{ github.ref_name }}
          echo "-----------------------"
          echo Deploy to: ${{ env.DEPLOY_NAMESPACE }}
          echo Pod name: ${{ steps.dotenv.outputs.PHP_DEPLOYMENT_NAME }}
          echo cron: ${{ env.CRON_DEPLOYMENT_NAME }}
          echo db: ${{ env.DB_DEPLOYMENT_NAME }}
          echo redis: ${{ env.REDIS_DEPLOYMENT_NAME }}
          echo moodle: ${{ env.DB_USER }}
          echo db-backup: ${{ env.DB_BACKUP_POD }}
          echo db-0.mysql: ${{ env.DB_HOST }}

  #Build the app

  build-php:
    name: Build PHP
    needs: checkEnv
    runs-on: ubuntu-latest
    if: github.ref_name == 'dev' || github.ref_name  == 'test' || github.ref_name  == 'prod'
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v1
      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift (tools)
        run: |
          oc login --token=${{ secrets.SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Echo build task
      - name: Prepare build
        run: echo "Building ${{ steps.dotenv.outputs.PHP_DEPLOYMENT_NAME }}:${{ env.BRANCH }} ..."

      # Get Environment Variables from file
      - name: Setup Env
        id: dotenv
        uses: falti/dotenv-action@v1.0.4
        with:
          path: example.env
          export-variables: true
          log-variables: true
          keys-case: upper

      # Build the app images
      - name: Build PHP Image
        working-directory: "./"
        run: |
          test -n "${{ env.BRANCH }}"
          test -n "${{ env.BUILD_NAMESPACE }}"
          echo "BUILIDING ${{ steps.dotenv.outputs.PHP_DEPLOYMENT_NAME }} with tag: ${{ env.BRANCH }}"
            oc -n $BUILD_NAMESPACE process -f ./openshift/docker-build.yml \
              -p NAME=${{ steps.dotenv.outputs.PHP_DEPLOYMENT_NAME }} \
              -p DB_USER=${{ steps.dotenv.outputs.DB_USER }} \
              -p SITE_URL=${{ steps.dotenv.outputs.APP_HOST }} \
              -p DB_HOST=${{ steps.dotenv.outputs.DB_HOST }} \
              -p DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -p IMAGE_REPO=${{ steps.dotenv.outputs.IMAGE_REPO }} \
              -p IMAGE_NAME=${{ steps.dotenv.outputs.PHP_DEPLOYMENT_NAME }} \
              -p IMAGE_TAG=${{ env.BASE_IMAGE_TAG }} \
              -p SOURCE_REPOSITORY_URL=${{ env.SOURCE_REPOSITORY_URL }} \
              -p DOCKER_FILE_PATH=${{ env.PHP_DOCKER_FILE_PATH }} \
              -p SOURCE_CONTEXT_DIR=${{ env.PHP_SOURCE_CONTEXT_DIR }} | oc -n ${{ env.BUILD_NAMESPACE }} apply -f -
          oc -n ${{ env.BUILD_NAMESPACE }} start-build bc/${{ steps.dotenv.outputs.PHP_DEPLOYMENT_NAME }} --no-cache --wait

  # Deploy App

  deploy:
    name: Deploy APP
    runs-on: ubuntu-latest
    if: github.ref_name == 'dev' || github.ref_name  == 'test' || github.ref_name  == 'prod'
    needs:
      - build-php
    steps:
      - name: Checkout Target Branch
        uses: actions/checkout@v1

       # Log in to OpenShift.
       # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
       # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift ( ${{ github.ref_name }} )
        run: |
          oc login --token=${{ format('AUTH_TOKEN_{0}', github.ref_name) }} --server=https://api.silver.devops.gov.bc.ca:6443

      - name: Set env
        run: echo ::set-env name=APP_HOST::moodle-$PROJECT-${{ github.ref_name }}.apps.silver.devops.gov.bc.ca

      - name: Deploy APP
        run: |
          test -n "$DEPLOY_NAMESPACE"
          test -n "${{ env.BRANCH}}"
          echo "Current namespace is ${{ env.DEPLOY_NAMESPACE }}"
          oc -n $DEPLOY_NAMESPACE process -f openshift/moodle-dc-persistent-template.json \
                -p APP_NAME=${{ steps.dotenv.outputs.APP}} \
                -p SITE_URL=$APP_HOST \
                -p DB_SERVICE_NAME=${{ steps.dotenv.outputs.DB_HOST }} \
                -p DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
                -p BUILD_NAMESPACE=${{ env.BUILD_NAMESPACE }} \
                -p DEPLOY_NAMESPACE=${{ env.DEPLOY_NAMESPACE }} \
                -p IMAGE_NAME=${{ env.IMAGE_NAME }} | \
          oc -n ${{ env.DEPLOY_NAMESPACE }} apply -f -
          oc rollout latest dc/moodle -n ${{ env.DEPLOY_NAMESPACE }}
          # Check deployment rollout status every 10 seconds (max 10 minutes) until complete.
          ATTEMPTS=0
          ROLLOUT_STATUS_CMD="oc rollout status dc/moodle -n ${{ env.DEPLOY_NAMESPACE }}"
          until $ROLLOUT_STATUS_CMD || [ $ATTEMPTS -eq 60 ]; do
            $ROLLOUT_STATUS_CMD
            ATTEMPTS=$((attempts + 1))
            sleep 10
          done
          oc project ${{ env.DEPLOY_NAMESPACE }}
          echo "Listing pods.."
          oc get pods|grep moodle
          sleep 30
          oc get pods -l deploymentconfig=moodle --field-selector=status.phase=Running -o name
          sleep 20
          podNames=$(oc get pods -l deploymentconfig=moodle --field-selector=status.phase=Running -o name)
          pwd
          ls -lrt .env
          echo $podNames
          for name in $podNames; do
            oc exec $podNames -- bash -c "
              cat <<- EOF > .env
              DB_PASSWORD=${{ secrets.DB_PASSWORD }}
              SSL_PROXY=true
              SITE_URL=$APP_HOST
              DB_HOST=${{ env.DB_HOST }}
              `EOF` "
          done
          export ROUTE="$(oc get route moodle -o jsonpath='{.spec.host}')"
          echo "$APP is exposed at 'https://'$ROUTE"

  notify-failure:
    if: ${{ failure() }}
    needs: [build-php, deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Notify Team of Workflow Failure
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ secrets.ROCKETCHAT_WEBHOOK_URL }}
          data: '{
            "alias":"FAILED GitHub Action by ${{ env.USER }}",
            "text":"Job: ${{ github.job }} in
              ${{ github.workflow }} of
              ${{ github.repository }}:${{ github.ref_name }}",
            "attachments":[{
              "title":"${{ github.job }} ${{ job.status }} to ${{ github.ref_name }}",
              "title_link": "${{ env.INSPECT_JOB_URL }}",
              "text":"Failure detected in ${{ github.repository }}:${{ github.ref_name }}",
              "image_url": "${{ env.FAIL_ICON_URL }}",
              "color":"#764FA5"
            }]}'

  notify-success:
    if: ${{ success() }}
    needs: [build-php, deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Notify Team of Workflow Success
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ secrets.ROCKETCHAT_WEBHOOK_URL }}
          data: '{
            "alias":"Successful ${{ github.job }} by $USER",
            "text":"${{ github.job }} in ${{ github.workflow }}
              of ${{ github.repository }}:${{ github.ref_name }}",
            "attachments":[{
              "title":"${{ github.job }} ${{ job.status }} to ${{ github.ref_name }}",
              "title_link":"https://github.com/kaji-bikash/rocketchat-pagerduty/blob/master/rocketchat_pagerduty_incoming.js",
              "text":"Successful ${{ github.job }} in ${{ github.workflow }} of ${{ github.repository }}:${{ github.ref_name }}",
              "image_url":"$SUCCESS_ICON_URL",
              "color":"#764FA5"
              }]
            }]
            }'

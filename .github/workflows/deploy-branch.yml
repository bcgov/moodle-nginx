# Static Deploy On Openshift
# Builds and Deploys merged PR's to persistent pods/services/routes/etc in the OpenShift Dev environment.
name: Deploy on Openshift

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - main

jobs:
  #Print variables for logging and debugging purposes
  checkEnv:
    name: Check Env variables
    runs-on: ubuntu-latest
    steps:
      - name: Print Env Vars
        run: |
          echo Git Base Ref: ${{ github.base_ref }}
          echo Git Build ID: ${{ github.event.number }}
          echo Git Pull Request Ref: ${{ github.event.pull_request.head.sha }}
          echo OC CLI Version: $(oc version)
          echo Git Branch name: ${{ github.ref_name }}

  #Build the app

  build:
    name: Build APP
    runs-on: ubuntu-latest
    if: github.ref_name == 'dev' || github.ref_name  == 'test' || github.ref_name  == 'prod'
    env:
      BUILD_ID: ${{ github.event.number }}
      BUILD_NAMESPACE: 950003-tools
      BRANCH: ${{ github.ref_name }}
      BUILD_TAG: ${{ github.ref_name }}
      APP: moodle
      DB_BACKUP_APP: db-backup
    steps:
      # Checkout the PR branch
      - name: Print env
        run: |
          echo BUILD ID: $BUILD_ID
          echo BUILD NAMESPACE: $BUILD_NAMESPACE
          echo BRANCH: $BRANCH
      - name: Checkout Target Branch
        uses: actions/checkout@v1
      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Build the app images
      - name: Build App image
        working-directory: "./openshift"
        run: |
          test -n "${BRANCH}"
          test -n "${BUILD_NAMESPACE}"
          echo "BUILIDING ${APP} with tag: ${BUILD_TAG}"
            oc -n ${BUILD_NAMESPACE} process -f docker-build.yml \
            -p DEPLOY_NAMESPACE=${BRANCH} \
            -p APP_NAME=${APP} | oc -n ${BUILD_NAMESPACE} apply -f -
          oc -n ${BUILD_NAMESPACE} start-build bc/${APP} --no-cache --wait

  # Deploy App
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    env:
      BUILD_ID: ${{ github.event.number }}
      DEPLOY_NAMESPACE: e66ac2-${{ github.ref_name }}
      BUILD_NAMESPACE: e66ac2-tools
      BRANCH: ${{ github.ref_name }}
      APP: moodle
      APP_HOST: moodle-e66ac2-${{ github.ref_name }}.apps.silver.devops.gov.bc.ca
      DB_NAME: moodle
      DB_USER: moodle
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      WEB_APP_NAME: web
      PHP_APP_NAME: php
      DB_APP_NAME: db
      CACHE_APP_NAME: redis
    steps:
      - name: Checkout Target Branch
        uses: actions/checkout@v1

       # Log in to OpenShift.
       # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
       # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift
        run: |
          oc login --token=${{ secrets.AUTH_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Build PHP-FPM (Moodle)
      - name: Deploy Moodle-PHP-FPM
        run: |
          test -n "${DEPLOY_NAMESPACE}"
          test -n "${BUILD_NAMESPACE}"
          test -n "${BRANCH}"
          echo "Current namespace is ${DEPLOY_NAMESPACE}"
          oc -n ${DEPLOY_NAMESPACE} process -f openshift/php.json \
                -p APP_NAME=${PHP_APP_NAME} \
                -p SITE_URL=${APP_HOST} \
                -p MEMORY_LIMIT=1Gi \
                -p MEMORY_REQUEST=128Mi \
                -p CPU_LIMIT=1 \
                -p CPU_REQUEST=0.2 \
                -p DEPLOY_NAMESPACE=${DEPLOY_NAMESPACE} \
                -p VOLUME_SIZE=10Gi \
                -p DB_PORT=3306 \
                -p APP_DATA_PATH="/var/www/html" \
                -p MOODLE_DATA_PATH="/app/moodledata" \
                -p IMAGE_STREAM="moodle:${BRANCH}" \
                || echo "PHP already exists in $BUILD_NAMESPACE";
          oc -n ${DEPLOY_NAMESPACE} apply -f - \
            || echo "${PHP_APP_NAME} template cannot be applied in $BUILD_NAMESPACE";
          oc rollout latest dc/${PHP_APP_NAME} -n ${DEPLOY_NAMESPACE} \
            || echo "${PHP_APP_NAME} rollout failed in $DEPLOY_NAMESPACE";
          # Check deployment rollout status every 10 seconds (max 10 minutes) until complete.
          ATTEMPTS=0
          ROLLOUT_STATUS_CMD="oc rollout status dc/${PHP_APP_NAME} -n ${DEPLOY_NAMESPACE}"
          until $ROLLOUT_STATUS_CMD || [ $ATTEMPTS -eq 60 ]; do
            $ROLLOUT_STATUS_CMD
            ATTEMPTS=$((attempts + 1))
            sleep 10
          done

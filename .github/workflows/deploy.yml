# Deploy On Openshift
# Builds and Deploys merged PR's to persistent pods/services/routes/etc in the OpenShift environment.
name: ðŸš€ Deploy on Openshift

env:
  APP: moodle
  USER: ${{ github.actor }}

on:
  workflow_call:
    inputs:
      APP:
        required: true
        type: string
      DB_NAME:
        required: true
        type: string
      DB_USER:
        required: true
        type: string
      DB_PASSWORD:
        required: true
        type: string
      BASE_IMAGE_TAG:
        required: true
        type: string
      IMAGE_REPO:
        required: true
        type: string
      DB_DEPLOYMENT_NAME:
        required: true
        type: string
      DB_IMAGE:
        required: true
        type: string
      BRANCH:
        required: true
        type: string
      APP_HOST_URL:
        required: true
        type: string
      BUILD_NAMESPACE:
        required: true
        type: string
      DEPLOY_NAMESPACE:
        required: true
        type: string
      WEB_DEPLOYMENT_NAME:
        required: true
        type: string
      WEB_IMAGE:
        required: true
        type: string
      PHP_IMAGE:
        required: true
        type: string
      PHP_DEPLOYMENT_NAME:
        required: true
        type: string
      CRON_IMAGE:
        required: true
        type: string
      CRON_DEPLOYMENT_NAME:
        required: true
        type: string
      REDIS_REPO:
        required: true
        type: string
      REDIS_DEPLOYMENT_NAME:
        required: true
        type: string
      REDIS_IMAGE:
        required: true
        type: string
    secrets:
      AUTH_TOKEN_DEV:
        required: true
      AUTH_TOKEN_TEST:
        required: true
      AUTH_TOKEN_PROD:
        required: true
    outputs:
      # This is the name of the output set by the workflow_dispatch action.
      # The value is the ID of the workflow run that was triggered.
      deploy1:
        description: "Deployment log"
        value: ${{ jobs.deploy.outputs.output1 }}
      deploy2:
        description: "Deployment log"
        value: ${{ jobs.deploy.outputs.output2 }}
  # push:
  #   paths:
  #     - './openshift/*'
  #     - '**.Dockerfile'
  #     - '**.yml'
  #     - '**.conf'
  #     - '**.ini'
  #     - '**.php'
permissions:
  contents: read
  id-token: write

jobs:
  # Deploy to Openshift
  deploy:
    name: ðŸš€ Deploy to OpenShift (${{ github.ref_name }})
    runs-on: ubuntu-latest
    if: |
      always()
      && (
        github.ref_name == 'dev' || github.ref_name  == 'test' || github.ref_name  == 'prod'
      ) || (
        contains(github.event.workflow_run.conclusion, 'success')
        && !contains(github.event.workflow_run.conclusion, 'failure')
      )
    outputs:
      output1: ${{ steps.deploy-to-os.outputs.deploy1 }}
      output2: ${{ steps.deploy-to-os.outputs.deploy2 }}
    steps:
      - name: ðŸ“¤ Checkout Target Branch
        uses: actions/checkout@v2

      # Get Environment Variables from file
      - name: ðŸ“‹ Setup Environment from File
        id: dotenv
        uses: falti/dotenv-action@v1
        with:
          path: example.env
          export-variables: true
          log-variables: true
          keys-case: upper

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: ðŸ”‘ Log in to OpenShift ( ${{ github.ref_name }} )
        if: success()
        run: |
          server=https://api.silver.devops.gov.bc.ca:6443
          if [[ ${{ github.ref_name == 'test' }} ]]; then
            oc login --token=${{ secrets.AUTH_TOKEN_DEV }} --server=$server
          elif [[ ${{ github.ref_name == 'test' }} ]]; then
            oc login --token=${{ secrets.AUTH_TOKEN_TEST }} --server=$server
          elif [[ ${{ github.ref_name == 'prod' }} ]]; then
            oc login --token=${{ secrets.AUTH_TOKEN_PROD }} --server=$server
          else
            echo "No AUTH_TOKEN found for ${{ github.ref_name }} branch"
          fi

      - name: Deploy Environment ConfigMap (moodle-env)
        if: success()
        run: |
          if [[ `oc describe configmap moodle-env 2>&1` =~ "NotFound" ]]; then
            oc create configmap moodle-env --from-file=.env=./example.env
          else
            oc delete configmap moodle-env
            oc create configmap moodle-env --from-file=.env=./example.env
          fi

      - name: ðŸš€ Deploy ${{ inputs.REDIS_DEPLOYMENT_NAME }} | ${{ inputs.REDIS_IMAGE }}
        if: success()
        run: |
          if [[ `oc describe sts ${{ inputs.REDIS_DEPLOYMENT_NAME  }} 2>&1` =~ "NotFound" ]]; then
            echo "${{ inputs.REDIS_DEPLOYMENT_NAME  }} NOT FOUND: Beginning ${{ inputs.REDIS_DEPLOYMENT_NAME  }} deployment..."
            helm install ${{ inputs.REDIS_DEPLOYMENT_NAME }} ${{ inputs.REDIS_REPO }}${{ inputs.REDIS_IMAGE }} --set redis.readinessProbe.enabled=false,redis.livenessProbe.enabled=false,podSecurityContext.enabled=false,containerSecurityContext.enabled=false,volumePermissions.containerSecurityContext.enabled=false -f ./config/redis/redis-cluster-values.yml
          else
            echo "${{ inputs.REDIS_DEPLOYMENT_NAME  }} Installation FOUND: Updating..."
            helm upgrade ${{ inputs.REDIS_DEPLOYMENT_NAME }}  ${{ inputs.REDIS_REPO }}${{ inputs.REDIS_IMAGE }}
            echo "${{ inputs.REDIS_DEPLOYMENT_NAME  }} Updates complete."
          fi

      - name: ðŸš€ Deploy Backup Container
        run: |
          if [[ `oc describe sts backup 2>&1` =~ "NotFound" ]]; then
            echo "Backup container NOT FOUND. Begin backup container deployment..."
            helm repo add bcgov http://bcgov.github.io/helm-charts
            echo '
              backupConfig: |
                mariadb=db/moodle

                0 1 * * * default ./backup.sh -s
                0 4 * * * default ./backup.sh -s -v all

              db:
                secretName: moodle-secrets
                usernameKey: database-user
                passwordKey: database-password

              env:
                DATABASE_SERVICE_NAME:
                  value: db
                ENVIRONMENT_FRIENDLY_NAME:
                  value: "DB Backups"
              ' > config.yaml
            helm upgrade --install backup -f config.yaml bcgov/backup-storage
          else
            echo "Backup container installation FOUND. Updating..."
            helm upgrade backup bcgov/backup-storage
            echo "Backup container updates completed."
          fi

      # For a graceful termination, set the replica count of the Pods in the mariadb-galera StatefulSet to 0:
      # oc scale sts ${{ inputs.DB_DEPLOYMENT_NAME  }} --replicas=0
      # To uninstall/delete the my-release release:
      # helm delete --purge ${{ inputs.DB_DEPLOYMENT_NAME  }}
      - name: ðŸš€ Deploy ${{ inputs.DB_DEPLOYMENT_NAME  }}
        if: success()
        run: |
          if [[ `oc describe sts ${{ inputs.DB_DEPLOYMENT_NAME  }} 2>&1` =~ "NotFound" ]]; then
            echo "${{ inputs.DB_DEPLOYMENT_NAME  }} NOT FOUND: Beginning deployment..."
            oc create -f ./config/mariadb/config.yaml -n ${{ inputs.DEPLOY_NAMESPACE }}
          else
            echo "${{ inputs.DB_DEPLOYMENT_NAME  }} Installation FOUND: Skipping..."
          fi

      - name: ðŸš€ Deploy OpenShift Template ( ${{ inputs.DEPLOY_NAMESPACE }} ) ${{ inputs.WEB_DEPLOYMENT_NAME }}, ${{ inputs.PHP_DEPLOYMENT_NAME }}, ${{ inputs.CRON_DEPLOYMENT_NAME }} - with routes, secrets, configmaps
        if: success()
        run: sh ./openshift/scripts/deploy-template.sh
        env:
          APP: ${{ inputs.APP }}
          DB_NAME: ${{ inputs.DB_NAME }}
          DB_USER: ${{ inputs.DB_USER }}
          DB_PASSWORD: ${{ inputs.DB_PASSWORD }}
          BUILD_TAG: ${{ inputs.BRANCH }}
          APP_HOST_URL: ${{ inputs.APP_HOST_URL }}
          BUILD_NAMESPACE: ${{ inputs.BUILD_NAMESPACE }}
          IMAGE_REPO: ${{ inputs.IMAGE_REPO }}
          DEPLOY_NAMESPACE: ${{ inputs.DEPLOY_NAMESPACE }}
          BASE_IMAGE_TAG: ${{ inputs.BASE_IMAGE_TAG }}
          WEB_DEPLOYMENT_NAME: ${{ inputs.WEB_DEPLOYMENT_NAME }}
          WEB_IMAGE: ${{ inputs.WEB_IMAGE }}
          PHP_DEPLOYMENT_NAME: ${{ inputs.PHP_DEPLOYMENT_NAME }}
          CRON_DEPLOYMENT_NAME: ${{ inputs.CRON_DEPLOYMENT_NAME }}
          CRON_IMAGE: ${{ inputs.CRON_IMAGE }}
          REDIS_DEPLOYMENT_NAME: ${{ inputs.REDIS_DEPLOYMENT_NAME }}

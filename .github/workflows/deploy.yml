# Deploy On Openshift
# Builds and Deploys merged PR's to persistent pods/services/routes/etc in the OpenShift environment.
name: Deploy on Openshift

env:
  APP: moodle
  USER: ${{ github.actor }}

  PROJECT: ${{ vars.OPENSHIFT_DEPLOY_PROJECT }}
  APP_HOST_URL: moodle-${{ vars.OPENSHIFT_DEPLOY_PROJECT }}-${{ github.ref_name }}.apps.silver.devops.gov.bc.ca
  BASE_IMAGE_TAG: ${{ github.ref_name }}
  BUILD_NAMESPACE: ${{ vars.OPENSHIFT_DEPLOY_PROJECT }}-tools
  DEPLOY_NAMESPACE: ${{ vars.OPENSHIFT_DEPLOY_PROJECT }}-${{ github.ref_name }}
  BUILD_ID: ${{ github.event.number }}
  BRANCH: ${{ github.ref_name }}
  SOURCE_REPOSITORY_URL: "https://github.com/${{ github.repository }}"
  INSPECT_JOB_URL: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  BUILD_ICON_URL: https://cdn-icons-png.flaticon.com/128/5110/5110294.png
  SUCCESS_ICON_URL: https://cdn-icons-png.flaticon.com/128/1356/1356479.png
  FAIL_ICON_URL: https://www.flaticon.com/free-icon/rocket_6818114

on:
  workflow_call:
    outputs:
      # This is the name of the output set by the workflow_dispatch action.
      # The value is the ID of the workflow run that was triggered.
      deploy1:
        description: "Deployment log"
        value: ${{ jobs.example_job.outputs.output1 }}
      deploy2:
        description: "Deployment log"
        value: ${{ jobs.example_job.outputs.output2 }}
  push:
    paths:
      - './openshift/*'
      - '**.Dockerfile'
      - '**.yml'
      - '**.conf'
      - '**.ini'
      - '**.php'

jobs:
  #Print variables for logging and debugging purposes
  checkEnv:
    name: Check Env variables
    runs-on: ubuntu-latest
    steps:
      - name: Print Env Vars
        run: |
          echo "Deployment test > Workflow Conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "-----------------------"
          echo OC CLI Version: $(oc version)
          echo Git Branch name: ${{ github.ref_name }}
          echo Deploy to: ${{ env.DEPLOY_NAMESPACE }}

  # Deploy to Openshift
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [checkEnv]
    if: |
      always()
      && (
        github.ref_name == 'dev' || github.ref_name  == 'test' || github.ref_name  == 'prod'
      ) || (
        contains(github.event.workflow_run.conclusion, 'success')
        && !contains(github.event.workflow_run.conclusion, 'failure')
      )
    outputs:
      output1: ${{ steps.deploy-to-os.outputs.deploy1 }}
      output2: ${{ steps.deploy-to-os.outputs.deploy2 }}
    steps:
      - name: Checkout Target Branch
        uses: actions/checkout@v2

      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      # First, build appropriate secret name for the environement: AUTH_TOKEN_DEV, AUTH_TOKEN_TEST, etc.
      - id: auth_token_string
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ format('AUTH_TOKEN_{0}', github.ref_name) }}
      - run: |
          echo "ENV AUTH SECRET NAME: ${{ steps.auth_token_string.outputs.uppercase }}"

      - name: Log in to OpenShift ( ${{ github.ref_name }} )
        run: |
          oc login --token=${{ secrets[steps.auth_token_string.outputs.uppercase] }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Get Environment Variables from file
      - name: Setup Env
        id: dotenv
        uses: falti/dotenv-action@v1.0.4
        with:
          path: example.env
          export-variables: true
          log-variables: true
          keys-case: upper

      - name: Uninstall Redis
        run: helm uninstall redis -n ${{ env.DEPLOY_NAMESPACE }}

      - name: Deploy Redis
        if: success() || failure()
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update
          helm install -f ./config/redis/values.yml ${{ steps.dotenv.outputs.REDIS_DEPLOYMENT_NAME }} ${{ steps.dotenv.outputs.REDIS_IMAGE }}
          helm install ${{ steps.dotenv.outputs.REDIS_DEPLOYMENT_NAME }} ${{ steps.dotenv.outputs.REDIS_IMAGE }}

      - name: Deploy DB (MariaDB Galera)
        if: success() || failure()
        run: |
          oc create -f ./config/mariadb/config.yaml -n ${{ env.DEPLOY_NAMESPACE }}

      - name: Deploy OpenShift Template ( ${{ env.DEPLOY_NAMESPACE }} ) web, php, cron, with routes, secrets, configmaps
        id: deploy-to-os
        if: success() || failure()
        run: sh ./openshift/scripts/deploy-template.sh
        env:
          APP: ${{ env.APP }}
          BRANCH: ${{ env.BRANCH }}
          APP_HOST_URL: ${{ env.APP_HOST_URL }}
          BUILD_NAMESPACE: ${{ env.BUILD_NAMESPACE }}
          DEPLOY_NAMESPACE: ${{ env.DEPLOY_NAMESPACE }}
          WEB_DEPLOYMENT_NAME: ${{ steps.dotenv.outputs.WEB_DEPLOYMENT_NAME }}
          PHP_DEPLOYMENT_NAME: ${{ steps.dotenv.outputs.PHP_DEPLOYMENT_NAME }}
          PHP_IMAGE: ${{ steps.dotenv.outputs.PHP_IMAGE }}
          CRON_DEPLOYMENT_NAME: ${{ steps.dotenv.outputs.CRON_DEPLOYMENT_NAME }}
          BUILD_TAG: ${{ env.BASE_IMAGE_TAG }}

name: Build and Deploy to OpenShift 🌐

env:
  APP: moodle
  USER: ${{ github.actor }}

  PROJECT: ${{ vars.OPENSHIFT_DEPLOY_PROJECT }}
  APP_HOST_URL: moodle-${{ vars.OPENSHIFT_DEPLOY_PROJECT }}-${{ github.ref_name }}.apps.silver.devops.gov.bc.ca
  BASE_IMAGE_TAG: ${{ github.ref_name }}
  BUILD_NAMESPACE: ${{ vars.OPENSHIFT_DEPLOY_PROJECT }}-tools
  DEPLOY_NAMESPACE: ${{ vars.OPENSHIFT_DEPLOY_PROJECT }}-${{ github.ref_name }}
  BUILD_ID: ${{ github.event.number }}
  BRANCH: ${{ github.ref_name }}
  SOURCE_REPOSITORY_URL: "https://github.com/${{ github.repository }}"
  INSPECT_JOB_URL: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  BUILD_ICON_URL: https://cdn-icons-png.flaticon.com/128/5110/5110294.png
  SUCCESS_ICON_URL: https://cdn-icons-png.flaticon.com/128/1356/1356479.png
  FAIL_ICON_URL: https://www.flaticon.com/free-icon/rocket_6818114

on:
  push:
    branches:
      - dev
      - test
      - prod
    paths:
      - '**.Dockerfile'
      - '**.conf'
      - '**.ini'
      - '**.php'
      - '**.yml'
      - 'php-fpm-healthcheck.sh'
  pull_request:
    branches:
      - dev
      - test
      - prod
    paths:
      - '**.Dockerfile'
      - '**.conf'
      - '**.ini'
      - '**.php'
      - '**.yml'
      - 'php-fpm-healthcheck.sh'

jobs:
  #Print variables for logging and debugging purposes
  checkEnv:
    name: Environment Check 📋
    runs-on: ubuntu-latest
    steps:
      - name: Print Env Vars
        run: |
          echo Deploying ${{ env.APP }} on ${{ env.PROJECT }}
          echo "-----------------------"
          echo Deploy to Namespace: ${{ env.DEPLOY_NAMESPACE }}
          echo URL: https://${{ env.APP_HOST_URL }}

  # Build PHP Image

  build-images:
    name: Build Application Images (${{ github.ref_name }} |  ${{ vars.SKIP_BUILD }}) ⚙️
    needs: [checkEnv]
    runs-on: ubuntu-latest
    if: (${{ vars.SKIP_BUILD == 'false' }} || ${{ vars.SKIP_BUILD == false }}) && (github.ref_name == 'dev' || github.ref_name == 'test' || github.ref_name == 'prod')
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch 📤
        uses: actions/checkout@v2
      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift 🔑
        run: |
          oc login --token=${{ secrets.SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Get Environment Variables from file
      - name: Setup Env 📋
        id: dotenv
        uses: falti/dotenv-action@v1
        with:
          path: example.env
          export-variables: true
          log-variables: true
          keys-case: upper

      # Echo build task
      - name: Prepare PHP 🔂
        run: |
          echo "Building ${{ steps.dotenv.outputs.PHP_DEPLOYMENT_NAME }}:${{ env.BRANCH }}"
          echo "Using ${{ steps.dotenv.outputs.PHP_IMAGE }}"
          if [ ${{ vars.SKIP_BUILD == 'false' }} == true ]; then
            echo "STARTING BUILD..."
          else
            echo "SKIPPING BUILD (Environment variable SKIP_BUILD=true)"
          fi

      # Build the PHP image
      - name: Build PHP 🚧
        id: build-php
        if: ${{ vars.SKIP_BUILD == 'false' }}
        working-directory: "./"
        run: sh ./openshift/scripts/build-docker-image.sh
        env:
          DOCKER_FROM_IMAGE: ${{ steps.dotenv.outputs.PHP_IMAGE }}
          DOCKER_FILE_PATH: ${{ env.PHP_DOCKER_FILE_PATH }}
          DEPLOYMENT_NAME: ${{ steps.dotenv.outputs.PHP_DEPLOYMENT_NAME }}
          SOURCE_CONTEXT_DIR: ${{ env.PHP_SOURCE_CONTEXT_DIR }}
          BRANCH: ${{ env.BRANCH }}
          BUILD_NAMESPACE: ${{ env.BUILD_NAMESPACE }}
          IMAGE_REPO: ${{ steps.dotenv.outputs.IMAGE_REPO }}
          IMAGE_TAG: ${{ env.BASE_IMAGE_TAG }}
          SOURCE_REPOSITORY_URL: ${{ env.SOURCE_REPOSITORY_URL }}

          # Echo build task
      - name: Prepare CRON 🔂
        run: |
            echo "Building ${{ steps.dotenv.outputs.CRON_DEPLOYMENT_NAME }}:${{ env.BRANCH }}"
            echo "Using ${{ steps.dotenv.outputs.CRON_IMAGE }}"
            if [ ${{ vars.SKIP_BUILD == 'false' }} ]; then
              echo "STARTING BUILD..."
            else
              echo "SKIPPING BUILD (Environment variable SKIP_BUILD=true)"
            fi

      # Build the Cron image
      - name: Build Cron 🚧
        id: build-cron
        if: ${{ vars.SKIP_BUILD == 'false' }}
        working-directory: "./"
        run: sh ./openshift/scripts/build-docker-image.sh
        env:
          DOCKER_FROM_IMAGE: ${{ steps.dotenv.outputs.CRON_IMAGE }}
          DOCKER_FILE_PATH: ${{ env.CRON_DOCKER_FILE_PATH }}
          DEPLOYMENT_NAME: ${{ steps.dotenv.outputs.CRON_DEPLOYMENT_NAME }}
          SOURCE_CONTEXT_DIR: ${{ env.CRON_SOURCE_CONTEXT_DIR }}
          BRANCH: ${{ env.BRANCH }}
          BUILD_NAMESPACE: ${{ env.BUILD_NAMESPACE }}
          IMAGE_REPO: ${{ steps.dotenv.outputs.IMAGE_REPO }}
          IMAGE_TAG: ${{ env.BASE_IMAGE_TAG }}
          SOURCE_REPOSITORY_URL: ${{ env.SOURCE_REPOSITORY_URL }}

    outputs:
      APP: ${{ steps.dotenv.outputs.APP }}
      WEB_DEPLOYMENT_NAME: ${{ steps.dotenv.outputs.WEB_DEPLOYMENT_NAME }}
      DB_DEPLOYMENT_NAME: ${{ steps.dotenv.outputs.DB_DEPLOYMENT_NAME }}
      PHP_IMAGE: ${{ steps.dotenv.outputs.PHP_IMAGE }}
      PHP_DEPLOYMENT_NAME: ${{ steps.dotenv.outputs.PHP_DEPLOYMENT_NAME }}
      CRON_IMAGE: ${{ steps.dotenv.outputs.CRON_IMAGE }}
      CRON_DEPLOYMENT_NAME: ${{ steps.dotenv.outputs.CRON_DEPLOYMENT_NAME }}
      REDIS_DEPLOYMENT_NAME: ${{ steps.dotenv.outputs.REDIS_DEPLOYMENT_NAME }}
      REDIS_IMAGE: ${{ steps.dotenv.outputs.REDIS_IMAGE }}
      WEB_IMAGE: ${{ steps.dotenv.outputs.WEB_IMAGE }}
      DB_IMAGE: ${{ steps.dotenv.outputs.DB_IMAGE }}
      APP_HOST_URL: ${{ env.APP_HOST_URL }}
      BUILD_NAMESPACE: ${{ env.BUILD_NAMESPACE }}
      DEPLOY_NAMESPACE: ${{ env.DEPLOY_NAMESPACE }}
      BRANCH: ${{ env.BRANCH }}
      BUILD_TEST_PASS: false

  call-deploy-workflow:
    name: Deploy to OpenShift 🚀 (build status ${{ needs.build-images.outcome }})
    uses: ./.github/workflows/deploy.yml
    needs: [build-images]
    if: needs.build-images.outcome == 'success' || needs.build-images.outcome == 'skipped' || ${{ vars.SKIP_BUILD == 'false' }}
    secrets: inherit
    with:
      BASE_IMAGE_TAG: ${{ github.ref_name }}
      APP: ${{ needs.build-images.outputs.APP }}
      WEB_DEPLOYMENT_NAME: ${{ needs.build-images.outputs.WEB_DEPLOYMENT_NAME }}
      WEB_IMAGE: ${{ needs.build-images.outputs.WEB_IMAGE }}
      PHP_DEPLOYMENT_NAME: ${{ needs.build-images.outputs.PHP_DEPLOYMENT_NAME }}
      PHP_IMAGE: ${{ needs.build-images.outputs.PHP_IMAGE }}
      DB_DEPLOYMENT_NAME: ${{ needs.build-images.outputs.DB_DEPLOYMENT_NAME }}
      DB_IMAGE: ${{ needs.build-images.outputs.DB_IMAGE }}
      CRON_IMAGE: ${{ needs.build-images.outputs.CRON_IMAGE }}
      CRON_DEPLOYMENT_NAME: ${{ needs.build-images.outputs.CRON_DEPLOYMENT_NAME }}
      REDIS_DEPLOYMENT_NAME: ${{ needs.build-images.outputs.REDIS_DEPLOYMENT_NAME }}
      REDIS_IMAGE: ${{ needs.build-images.outputs.REDIS_IMAGE }}
      APP_HOST_URL: ${{ needs.build-images.outputs.APP_HOST_URL }}
      BUILD_NAMESPACE: ${{ needs.build-images.outputs.BUILD_NAMESPACE }}
      DEPLOY_NAMESPACE: ${{ needs.build-images.outputs.DEPLOY_NAMESPACE }}
      BRANCH: ${{ needs.build-images.outputs.BRANCH }}

  notify-failure:
    name: Failed ⚠️
    if: ${{ failure() }}
    needs: [build-images, call-deploy-workflow]
    runs-on: ubuntu-latest
    steps:
      - name: Notify Team of Workflow Failure
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ secrets.ROCKETCHAT_WEBHOOK_URL }}
          data: '{
            "alias":"FAILED GitHub Action by ${{ env.USER }}",
            "text":"Job: ${{ github.job }} in
              ${{ github.workflow }} of
              ${{ github.repository }}:${{ github.ref_name }} >>
              Deploy1: ${{ needs.call-deploy-workflow.outputs.deploy1 }}
              Deploy2: ${{ needs.call-deploy-workflow.outputs.deploy2 }}",
            "attachments":[{
              "title":"${{ github.job }} ${{ job.status }} to ${{ github.ref_name }}",
              "title_link": "${{ env.INSPECT_JOB_URL }}",
              "text":"Failure detected in ${{ github.repository }}:${{ github.ref_name }}",
              "image_url": "${{ env.FAIL_ICON_URL }}",
              "color":"#764FA5"
            }]}'

  notify-success:
    name: Succeeded ✅
    if: ${{ success() }}
    needs: [build-images, call-deploy-workflow]
    runs-on: ubuntu-latest
    steps:
      - name: Notify Team of Workflow Success
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ secrets.ROCKETCHAT_WEBHOOK_URL }}
          data: '{
            "alias":"Successful ${{ github.job }} by $USER",
            "text":"${{ github.job }} in ${{ github.workflow }}
              of ${{ github.repository }}:${{ github.ref_name }}",
            "attachments":[{
              "title":"${{ github.job }} ${{ job.status }} to ${{ github.ref_name }}",
              "title_link":"https://github.com/kaji-bikash/rocketchat-pagerduty/blob/master/rocketchat_pagerduty_incoming.js",
              "text":"Successful ${{ github.job }} in ${{ github.workflow }} of ${{ github.repository }}:${{ github.ref_name }}",
              "image_url":"$SUCCESS_ICON_URL",
              "color":"#764FA5"
              }]
            }]
            }'

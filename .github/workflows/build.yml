# Build Images
# Builds merged PR's to images in OpenShift tools namespace.
name: Build Images

env:
  APP: moodle
  USER: ${{ github.actor }}

  PROJECT: ${{ vars.OPENSHIFT_DEPLOY_PROJECT }}
  APP_HOST_URL: moodle-${{ vars.OPENSHIFT_DEPLOY_PROJECT }}-${{ github.ref_name }}.apps.silver.devops.gov.bc.ca
  BASE_IMAGE_TAG: ${{ github.ref_name }}
  BUILD_NAMESPACE: ${{ vars.OPENSHIFT_DEPLOY_PROJECT }}-tools
  DEPLOY_NAMESPACE: ${{ vars.OPENSHIFT_DEPLOY_PROJECT }}-${{ github.ref_name }}
  BUILD_ID: ${{ github.event.number }}
  BRANCH: ${{ github.ref_name }}
  SOURCE_REPOSITORY_URL: "https://github.com/${{ github.repository }}"
  INSPECT_JOB_URL: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  BUILD_ICON_URL: https://cdn-icons-png.flaticon.com/128/5110/5110294.png
  SUCCESS_ICON_URL: https://cdn-icons-png.flaticon.com/128/1356/1356479.png
  FAIL_ICON_URL: https://www.flaticon.com/free-icon/rocket_6818114

on:
  push:
    branches:
      - dev
      - test
      - prod
    paths:
      - '**.Dockerfile'
      - '**.conf'
      - '**.ini'
      - '**.php'
      - '**.yml'
      - 'php-fpm-healthcheck.sh'
  pull_request:
    branches:
      - dev
      - test
      - prod
    paths:
      - '**.Dockerfile'
      - '**.conf'
      - '**.ini'
      - '**.php'
      - '**.yml'
      - 'php-fpm-healthcheck.sh'

jobs:
  #Print variables for logging and debugging purposes
  checkEnv:
    name: Check Env variables
    runs-on: ubuntu-latest
    steps:
      - name: Print Env Vars
        run: |
          echo Git Base Ref: ${{ github.base_ref }}
          echo Git Build ID: ${{ github.event.number }}
          echo Git Pull Request Ref: ${{ github.event.pull_request.head.sha }}
          echo OC CLI Version: $(oc version)
          echo Git Branch name: ${{ github.ref_name }}
          echo "-----------------------"
          echo "Build Image: ${{ steps.dotenv.outputs.PHP_IMAGE }}"
          echo "-----------------------"
          echo Deploy to: ${{ env.DEPLOY_NAMESPACE }}
          echo Pod name: ${{ steps.dotenv.outputs.PHP_DEPLOYMENT_NAME }}
          echo cron: ${{ env.CRON_DEPLOYMENT_NAME }}
          echo db: ${{ env.DB_DEPLOYMENT_NAME }}
          echo redis: ${{ env.REDIS_DEPLOYMENT_NAME }}
          echo moodle: ${{ env.DB_USER }}
          echo db-backup: ${{ env.DB_BACKUP_POD }}
          echo db-0.mysql: ${{ env.DB_HOST }}

  # Build PHP Image

  build-images:
    name: Build Images
    needs: [checkEnv]
    runs-on: ubuntu-latest
    if: ${{ vars.SKIP_BUILD }} == 'false' && (github.ref_name == 'dev' || github.ref_name  == 'test' || github.ref_name  == 'prod')
    steps:
      # Checkout the PR branch
      - name: Checkout Target Branch
        uses: actions/checkout@v2
      # Log in to OpenShift.
      # Note: The secrets needed to log in are NOT available if the PR comes from a FORK.
      # PR's must originate from a branch off the original repo or else all openshift `oc` commands will fail.
      - name: Log in to OpenShift (tools)
        run: |
          oc login --token=${{ secrets.SA_TOKEN }} --server=https://api.silver.devops.gov.bc.ca:6443

      # Get Environment Variables from file
      - name: Setup Env
        id: dotenv
        uses: falti/dotenv-action@v1
        with:
          path: example.env
          export-variables: true
          log-variables: true
          keys-case: upper

      # Echo build task
      - name: Prepare PHP build
        run: echo "Building ${{ steps.dotenv.outputs.PHP_DEPLOYMENT_NAME }}:${{ env.BRANCH }}"

      # Build the PHP image
      - name: Build PHP Image
        working-directory: "./"
        run: sh ./openshift/scripts/build-docker-image.sh
        env:
          PHP_IMAGE: ${{ steps.dotenv.outputs.PHP_IMAGE }}
          DOCKER_FILE_PATH: ${{ env.PHP_DOCKER_FILE_PATH }}
          DEPLOYMENT_NAME: ${{ steps.dotenv.outputs.PHP_DEPLOYMENT_NAME }}
          SOURCE_CONTEXT_DIR: ${{ env.PHP_SOURCE_CONTEXT_DIR }}
          BRANCH: ${{ env.BRANCH }}
          BUILD_NAMESPACE: ${{ env.BUILD_NAMESPACE }}
          IMAGE_REPO: ${{ steps.dotenv.outputs.IMAGE_REPO }}
          IMAGE_TAG: ${{ env.BASE_IMAGE_TAG }}
          SOURCE_REPOSITORY_URL: ${{ env.SOURCE_REPOSITORY_URL }}

          # Echo build task
      - name: Prepare CRON build
        run: echo "Building ${{ steps.dotenv.outputs.CRON_DEPLOYMENT_NAME }}:${{ env.BRANCH }}"

      # Build the Cron image
      - name: Build Cron Image
        working-directory: "./"
        run: sh ./openshift/scripts/build-docker-image.sh
        env:
          PHP_IMAGE: ${{ steps.dotenv.outputs.CRON_IMAGE }}
          DOCKER_FILE_PATH: ${{ env.CRON_DOCKER_FILE_PATH }}
          DEPLOYMENT_NAME: ${{ steps.dotenv.outputs.CRON_DEPLOYMENT_NAME }}
          SOURCE_CONTEXT_DIR: ${{ env.CRON_SOURCE_CONTEXT_DIR }}
          BRANCH: ${{ env.BRANCH }}
          BUILD_NAMESPACE: ${{ env.BUILD_NAMESPACE }}
          IMAGE_REPO: ${{ steps.dotenv.outputs.IMAGE_REPO }}
          IMAGE_TAG: ${{ env.BASE_IMAGE_TAG }}
          SOURCE_REPOSITORY_URL: ${{ env.SOURCE_REPOSITORY_URL }}

  call-deploy-workflow:
    uses: ./.github/workflows/deploy.yml

  notify-failure:
    if: ${{ failure() }}
    needs: [build-images, call-deploy-workflow]
    runs-on: ubuntu-latest
    steps:
      - name: Notify Team of Workflow Failure
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ secrets.ROCKETCHAT_WEBHOOK_URL }}
          data: '{
            "alias":"FAILED GitHub Action by ${{ env.USER }}",
            "text":"Job: ${{ github.job }} in
              ${{ github.workflow }} of
              ${{ github.repository }}:${{ github.ref_name }} >>
              Deploy1: ${{ needs.call-deploy-workflow.outputs.deploy1 }}
              Deploy2: ${{ needs.call-deploy-workflow.outputs.deploy2 }}",
            "attachments":[{
              "title":"${{ github.job }} ${{ job.status }} to ${{ github.ref_name }}",
              "title_link": "${{ env.INSPECT_JOB_URL }}",
              "text":"Failure detected in ${{ github.repository }}:${{ github.ref_name }}",
              "image_url": "${{ env.FAIL_ICON_URL }}",
              "color":"#764FA5"
            }]}'

  notify-success:
    if: ${{ success() }}
    needs: [build-images, call-deploy-workflow]
    runs-on: ubuntu-latest
    steps:
      - name: Notify Team of Workflow Success
        uses: muinmomin/webhook-action@v1.0.0
        with:
          url: ${{ secrets.ROCKETCHAT_WEBHOOK_URL }}
          data: '{
            "alias":"Successful ${{ github.job }} by $USER",
            "text":"${{ github.job }} in ${{ github.workflow }}
              of ${{ github.repository }}:${{ github.ref_name }}",
            "attachments":[{
              "title":"${{ github.job }} ${{ job.status }} to ${{ github.ref_name }}",
              "title_link":"https://github.com/kaji-bikash/rocketchat-pagerduty/blob/master/rocketchat_pagerduty_incoming.js",
              "text":"Successful ${{ github.job }} in ${{ github.workflow }} of ${{ github.repository }}:${{ github.ref_name }}",
              "image_url":"$SUCCESS_ICON_URL",
              "color":"#764FA5"
              }]
            }]
            }'

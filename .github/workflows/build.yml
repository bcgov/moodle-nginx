name: üöÄ Deploy to OpenShift

concurrency:
  group: deploy-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  APP: moodle
  USER: ${{ github.actor }}

  # Skip builds for faster deployments / testing ("YES" or build)
  SKIP_BUILDS: "NO"
  # Clean builds before deployments (delete all resources, other than backups) ("YES" or allow collisions)
  CLEAN_BUILDS: "NO"
  BUILD_ID: ${{ github.event.number }}
  # BRANCH: ${{ env.BRANCH }}
  BRANCH: dev
  INSPECT_JOB_URL: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  BUILD_ICON_URL: https://cdn-icons-png.flaticon.com/128/5110/5110294.png
  SUCCESS_ICON_URL: https://cdn-icons-png.flaticon.com/128/1356/1356479.png
  FAIL_ICON_URL: https://www.flaticon.com/free-icon/rocket_6818114

on:
  schedule:
    - cron: "0 3 * * 6"
  push:
    branches:
      - dev
      # - test
      # - prod
  pull_request:
    branches:
      - dev
      #- test
      #- prod

  workflow_call:
    secrets:
      DB_NAME:
        required: true
      DB_USER:
        required: true
      DB_PASSWORD:
        required: true

jobs:
  #Print variables for logging and debugging purposes
  checkEnv:
    name: üìã Environment Check
    runs-on: ubuntu-latest
    outputs: # Define the output parameter
      APP: ${{ env.APP }}
      BRANCH: ${{ env.BRANCH }}
      MOODLE_ENVIRONMENT: ${{ env.MOODLE_ENVIRONMENT }}
      DEPLOY_NAMESPACE: ${{ env.OPENSHIFT_DEPLOY_PROJECT }}-${{ env.BRANCH }}
      IMAGE_REPO: ${{ env.IMAGE_REPO }}
      BUILD_NAMESPACE: ${{ env.OPENSHIFT_DEPLOY_PROJECT }}-${{ env.BRANCH }}
      DB_DEPLOYMENT_NAME: ${{ env.DB_DEPLOYMENT_NAME }}
      WEB_DEPLOYMENT_NAME: ${{ env.WEB_DEPLOYMENT_NAME }}
      WEB_IMAGE: ${{ env.WEB_IMAGE }}
      DB_HOST: ${{ env.DB_HOST }}
      DB_NAME: ${{ env.DB_NAME }}
      DB_IMAGE: ${{ env.DB_IMAGE }}
      PHP_DEPLOYMENT_NAME: ${{ env.PHP_DEPLOYMENT_NAME }}
      CRON_DEPLOYMENT_NAME: ${{ env.CRON_DEPLOYMENT_NAME }}
      CRON_IMAGE: ${{ env.CRON_IMAGE}}
      REDIS_DEPLOYMENT_NAME: ${{ env.REDIS_DEPLOYMENT_NAME }}
      DB_BACKUP_DEPLOYMENT_NAME: ${{ env.DB_BACKUP_DEPLOYMENT_NAME }}
      DB_BACKUP_DEPLOYMENT_FULL_NAME: ${{ env.DB_BACKUP_DEPLOYMENT_FULL_NAME }}
      BACKUP_IMAGE: ${{ env.BACKUP_IMAGE }}
      BACKUP_HELM_CHART: ${{ env.BACKUP_HELM_CHART }}
      CLEAN_BUILDS: ${{ env.CLEAN_BUILDS }}
      SKIP_BUILDS: ${{ env.SKIP_BUILDS }}
    steps:
      - name: üì§ Checkout Target Branch
        uses: actions/checkout@v4
        with:
          ref: dev
          sparse-checkout: |
            config/mariadb
            example.env
            example.versions.env

      - name: Setup Env Vars
        id: dotenv
        uses: falti/dotenv-action@v1
        with:
          path: example.env
          export-variables: true
          keys-case: upper

      - name: Setup Env Version Vars
        id: dotenv_versions
        uses: falti/dotenv-action@v1
        with:
          path: example.versions.env
          export-variables: true
          keys-case: upper

      - name: Print Env Vars
        run: |
          echo Deploying ${{ env.PROJECT }} > ${{ env.APP }} on ${{ env.OPENSHIFT_DEPLOY_PROJECT }}-${{ env.BRANCH }}
          echo "-----------------------"
          echo URL: https://${{ env.APP }}-${{ env.DEPLOY_NAMESPACE }}-${{ env.BRANCH }}.apps.silver.devops.gov.bc.ca

  # Build Images and deploy to JFrog
  db:
    name: üî® DB
    needs: [checkEnv]
    uses: ./.github/workflows/db.yml
    secrets: inherit
    if: needs.checkEnv.outputs.SKIP_BUILDS == 'NO'
    with:
      DB_IMAGE: ${{ needs.checkEnv.outputs.DB_IMAGE }}

  php:
    name: üî® PHP
    needs: [checkEnv]
    if: needs.checkEnv.outputs.SKIP_BUILDS == 'NO'
    uses: ./.github/workflows/php.yml
    secrets: inherit

  cron:
    name: üî® Cron
    needs: [checkEnv]
    if: needs.checkEnv.outputs.SKIP_BUILDS == 'NO'
    uses: ./.github/workflows/cron.yml
    secrets: inherit

  web:
    name: üî® Web
    needs: [checkEnv]
    if: needs.checkEnv.outputs.SKIP_BUILDS == 'NO'
    uses: ./.github/workflows/web.yml
    secrets: inherit

  moodle:
    name: üî® Moodle
    needs: [checkEnv]
    if: needs.checkEnv.outputs.SKIP_BUILDS == 'NO'
    uses: ./.github/workflows/moodle.yml
    secrets: inherit

  call-cleanup-workflow:
    name: üßπÔ∏è Clean-up
    uses: ./.github/workflows/cleanup.yml
    secrets: inherit
    needs: [checkEnv, db, php, cron, moodle, web]
    # if: success()
    if: needs.checkEnv.outputs.CLEAN_BUILDS == 'YES'
    with:
      APP: ${{ needs.checkEnv.outputs.APP }}
      APP_HOST_URL: ${{ needs.checkEnv.outputs.APP }}-${{ needs.checkEnv.outputs.DEPLOY_NAMESPACE }}.apps.silver.devops.gov.bc.ca
      BRANCH: ${{ needs.checkEnv.outputs.BRANCH }}
      BUILD_NAMESPACE: ${{ needs.checkEnv.outputs.BUILD_NAMESPACE }}
      DEPLOY_NAMESPACE: ${{ needs.checkEnv.outputs.DEPLOY_NAMESPACE }}
      DB_DEPLOYMENT_NAME: ${{ needs.checkEnv.outputs.DB_DEPLOYMENT_NAME }}
      WEB_DEPLOYMENT_NAME: ${{ needs.checkEnv.outputs.WEB_DEPLOYMENT_NAME }}
      PHP_DEPLOYMENT_NAME: ${{ needs.checkEnv.outputs.PHP_DEPLOYMENT_NAME }}
      CRON_DEPLOYMENT_NAME: ${{ needs.checkEnv.outputs.CRON_DEPLOYMENT_NAME }}
      REDIS_DEPLOYMENT_NAME: ${{ needs.checkEnv.outputs.REDIS_DEPLOYMENT_NAME }}

  call-deploy-workflow:
    name: üöÄ Deploy
    uses: ./.github/workflows/deploy.yml
    secrets: inherit
    needs: [checkEnv, db, php, cron, moodle, call-cleanup-workflow]
    if: |
      always() &&
      needs.checkEnv.result == 'success' &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    with:
      MOODLE_ENVIRONMENT: ${{ needs.checkEnv.outputs.MOODLE_ENVIRONMENT }}
      APP: ${{ needs.checkEnv.outputs.APP }}
      WEB_DEPLOYMENT_NAME: ${{ needs.checkEnv.outputs.WEB_DEPLOYMENT_NAME }}
      WEB_IMAGE: ${{ needs.checkEnv.outputs.WEB_IMAGE }}
      PHP_DEPLOYMENT_NAME: ${{ needs.checkEnv.outputs.PHP_DEPLOYMENT_NAME }}
      DB_HOST: ${{ needs.checkEnv.outputs.DB_HOST }}
      DB_NAME: ${{ needs.checkEnv.outputs.DB_NAME }}
      DB_DEPLOYMENT_NAME: ${{ needs.checkEnv.outputs.DB_DEPLOYMENT_NAME }}
      DB_BACKUP_DEPLOYMENT_NAME: ${{ needs.checkEnv.outputs.DB_BACKUP_DEPLOYMENT_NAME }}
      DB_BACKUP_DEPLOYMENT_FULL_NAME: ${{ needs.checkEnv.outputs.DB_BACKUP_DEPLOYMENT_FULL_NAME }}
      BACKUP_IMAGE: ${{ needs.checkEnv.outputs.BACKUP_IMAGE }}
      BACKUP_HELM_CHART: ${{ needs.checkEnv.outputs.BACKUP_HELM_CHART }}
      CRON_IMAGE: ${{ needs.checkEnv.outputs.CRON_IMAGE }}
      CRON_DEPLOYMENT_NAME: ${{ needs.checkEnv.outputs.CRON_DEPLOYMENT_NAME }}
      REDIS_DEPLOYMENT_NAME: ${{ needs.checkEnv.outputs.REDIS_DEPLOYMENT_NAME }}
      APP_HOST_URL: ${{ needs.checkEnv.outputs.APP }}-${{ needs.checkEnv.outputs.DEPLOY_NAMESPACE }}.apps.silver.devops.gov.bc.ca
      BUILD_NAMESPACE: ${{ needs.checkEnv.outputs.BUILD_NAMESPACE }}
      DEPLOY_NAMESPACE: ${{ needs.checkEnv.outputs.DEPLOY_NAMESPACE }}
      IMAGE_REPO: ${{ needs.checkEnv.outputs.IMAGE_REPO }}

  lighthouse-check:
    name: üëÄ Test
    runs-on: ubuntu-latest
    needs: [checkEnv, call-deploy-workflow]
    outputs:
      lighthouseCheckResults: ${{ steps.lighthouseCheck.outputs.lighthouseCheckResults }}
    if: |
      always() &&
      needs.call-deploy-workflow.result == 'success' &&
      !contains(needs.*.result, 'failure')
    steps:
      - uses: actions/checkout@v4
      - run: mkdir -p tmp/artifacts
      - name: Install dependencies
        run: sudo apt-get install -y gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget libgbm-dev
      - name: Setup Chrome
        id: setup-chrome
        uses: browser-actions/setup-chrome@latest
        with:
          install-dependencies: false
      - name: Lighthouse
        uses: foo-software/lighthouse-check-action@master
        id: lighthouseCheck
        env:
          CHROME_PATH: ${{ steps.setup-chrome.outputs.chrome-path }}
          APP_HOST_URL: ${{ needs.checkEnv.outputs.APP }}-${{ needs.checkEnv.outputs.DEPLOY_NAMESPACE }}.apps.silver.devops.gov.bc.ca
        with:
          outputDirectory: tmp/artifacts
          urls: 'https://${{ env.APP_HOST_URL }},https://${{ env.APP_HOST_URL }}/login/'
          overridesJsonFile: config/lighthouse/overrides.json
      - name: Verify Lighthouse Check results
        uses: foo-software/lighthouse-check-status-action@master
        with:
          lighthouseCheckResults: ${{ steps.lighthouseCheck.outputs.lighthouseCheckResults }}
          minAccessibilityScore: "80"
          minBestPracticesScore: "80"
          minPerformanceScore: "40"
          #minProgressiveWebAppScore: "0"
          #minSeoScore: "0"

  notify:
    name: üì´ Notify
    needs:
      [
        checkEnv,
        web,
        moodle,
        cron,
        php,
        db,
        call-cleanup-workflow,
        call-deploy-workflow,
        lighthouse-check
      ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      # - name: Test Results to Markdown Table
      #   uses: buildingcash/json-to-markdown-table-action@v1
      #   id: table
      #   with:
      #     json: ${{ needs.lighthouse-check.outputs.lighthouseCheckResults }}
      - uses: actions/checkout@v4
      - name: Audit URLs using Lighthouse
        uses: treosh/lighthouse-ci-action@v11
        env:
          LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}
          CHROME_PATH: ${{ steps.setup-chrome.outputs.chrome-path }}
          APP_HOST_URL: ${{ needs.checkEnv.outputs.APP }}-${{ needs.checkEnv.outputs.DEPLOY_NAMESPACE }}.apps.silver.devops.gov.bc.ca
        with:
          urls: |
            https://${{ env.APP_HOST_URL }}
            https://${{ env.APP_HOST_URL }}/login/
          budgetPath: config/lighthouse/budget.json # test performance budgets
          uploadArtifacts: false # save results as an action artifacts
          temporaryPublicStorage: true # upload lighthouse report to the temporary storage
          configPath: config/lighthouse/lighthouserc.json # custom lighthouse configuration
      - name: Lighthouse Report
        uses: manrueda/lighthouse-report-action@v1.1.2
        id: lhreport
        with:
          reports: '.lighthouseci'
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set Emoji for Notification Status Icon
        id: notification-emoji
        run: |
          if [[ "${{ needs.call-deploy-workflow.result }}" == "success" ]]; then
            `echo "EMOJI=:rocket:" >> $GITHUB_OUTPUT`
          else
            `echo "EMOJI=:boom:" >> $GITHUB_OUTPUT`
          fi

      - name: Send Notification to Rocket.Chat
        uses: muinmomin/webhook-action@v1.0.0
        env:
          APP_HOST_URL: ${{ needs.checkEnv.outputs.APP }}-${{ needs.checkEnv.outputs.DEPLOY_NAMESPACE }}.apps.silver.devops.gov.bc.ca
        with:
          url: ${{ secrets.ROCKETCHAT_WEBHOOK_URL }}
          data: >
            {
              "emoji": "${{ steps.notification-emoji.outputs.EMOJI }}",
              "text": "Deployment to: ${{ needs.checkEnv.outputs.DEPLOY_NAMESPACE }}, status: ${{ needs.call-deploy-workflow.result }}",
              "attachments": [{
                "title": "View Job on GitHub",
                "title_link": "${{ env.INSPECT_JOB_URL }}",
                "text": "${{ needs.call-deploy-workflow.result }} ${{ steps.notification-emoji.outputs.EMOJI }}"
                "fields": [{
                  "title": "LightHouse Results",
                  "value": "${{ steps.table.outputs.table }}"
                },{
                  "title": "Verify Moodle",
                  "value": "Verify that the site still works and updates have been completed. Admin access required for updates.<p><a href=\"${{ env.APP_HOST_URL }}/admin/index.php\">Moodle (${{ needs.checkEnv.outputs.DEPLOY_NAMESPACE }})</a></p>"
                },{
                  "title": "DB",
                  "value": "${{ needs.db.result }}"
                },{
                  "title": "PHP",
                  "value": "${{ needs.php.result }}"
                },{
                  "title": "Cron",
                  "value": "${{ needs.cron.result }}"
                },{
                  "title": "Web",
                  "value": "${{ needs.web.result }}"
                },{
                  "title": "Moodle",
                  "value": "${{ needs.moodle.result }}"
                },{
                  "title": "Cleanup",
                  "value": "${{ needs.call-cleanup-workflow.result }}"
                },{
                  "title": "Lighthouse",
                  "value": "${{ needs.lighthouse-check.result }}"
                }]
              }]
            }

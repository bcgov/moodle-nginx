version: '3'
services:
    # OPTIONAL: Setup act for testing GitGub Actions locally
    # You can also install on your workstation, for example:
    # $ choco install act-cli
    # $ act -s GITHUB_TOKEN="$(gh auth token)" --secret-file example.secrets -W './.github/workflows/db.yml'
    # act:
    #     build:
    #         context: .
    #         dockerfile: ACT.Dockerfile
    #         args:
    #           TEST: 123
    #     volumes:
    #         - /var/run/docker.sock:/var/run/docker.sock
    #         - ./:/github/workspace
    # Build moodle and plugins from repo, then save to shared volume on startup
    # After build, the moodle files need to be copied to the shared volume,
    # where they can be accessed by the php, cron and web containers.
    build:
        tty: true
        restart: "no"
        environment:
          DB_PASSWORD: ${DB_PASSWORD:-moodle}
          DB_USER: ${DB_USER:-moodle}
          DB_NAME: ${DB_NAME:-moodle}
        env_file:
          - example.versions.env
        build:
            context: .
            dockerfile: Moodle.Dockerfile
            args:
              DEPLOY_ENVIRONMENT: ${DEPLOY_ENVIRONMENT:-local}
              DOCKER_FROM_IMAGE: ${IMAGE_REPO}${PHP_IMAGE:-php:8.3-fpm}
              MOODLE_BRANCH_VERSION: ${MOODLE_BRANCH_VERSION:-MOODLE_405_STABLE}
              # F2F_BRANCH_VERSION: ${F2F_BRANCH_VERSION:-MOODLE_400_STABLE}
              # HVP_BRANCH_VERSION: ${HVP_BRANCH_VERSION:-stable}
              # FORMAT_BRANCH_VERSION: ${FORMAT_BRANCH_VERSION:-MOODLE_311}
              # CERTIFICATE_BRANCH_VERSION: ${CERTIFICATE_BRANCH_VERSION:-MOODLE_311_STABLE}
              # CUSTOMCERT_BRANCH_VERSION: ${CUSTOMCERT_BRANCH_VERSION:-MOODLE_311_STABLE}
              # DATAFLOWS_BRANCH_VERSION: ${DATAFLOWS_BRANCH_VERSION:-MOODLE_35_STABLE}
        volumes:
            - ./temp/var/www:/var/www:delegated
        # Keep the container running so we can run the migration scripts and copy the files to the shared volume
        command:  tail -F anything
    web:
        depends_on:
          php:
            condition: service_healthy
        image: ${WEB_IMAGE:-nginxinc/nginx-unprivileged:1.25.4-alpine-slim}
        ports:
            - "8080:8080"
        volumes:
            - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf:delegated
            - ./temp/var/www:/var/www:delegated
        links:
          - php
    db:
        image: ${DB_IMAGE:-mariadb:10}
        env_file: example.env
        volumes:
            - mysqldata:/var/lib/mysql:delegated
            - ./temp/db-backups:/tmp/db-backups:delegated
        ports:
            - 3307:3306
        healthcheck:
          test: [
            "CMD-SHELL",
            "healthcheck.sh --innodb_initialized --connect"
          ]
          interval: 10s
          timeout: 5s
          retries: 5
    php:
        depends_on:
          db:
            condition: service_healthy
        tty: true
        restart: "no"
        env_file:
          - example.env
        ports:
            - 9000:9000
        environment:
          XDEBUG_MODE: debug
          XDEBUG_CONFIG: client_host=host.docker.internal client_port=9003
          DB_PASSWORD: ${DB_PASSWORD:-moodle}
          DB_USER: ${DB_USER:-moodle}
          DB_NAME: ${DB_NAME:-moodle}
        build:
            context: .
            dockerfile: PHP.Dockerfile
            args:
              DOCKER_FROM_IMAGE: ${IMAGE_REPO}${PHP_IMAGE:-php:8.3-fpm}
              PHP_INI_ENVIRONMENT: ${PHP_INI_ENVIRONMENT:-production}
              MOODLE_BRANCH_VERSION: ${MOODLE_BRANCH_VERSION:-MOODLE_404_STABLE}
              # F2F_BRANCH_VERSION: ${F2F_BRANCH_VERSION:-MOODLE_400_STABLE}
              # HVP_BRANCH_VERSION: ${HVP_BRANCH_VERSION:-stable}
              # FORMAT_BRANCH_VERSION: ${FORMAT_BRANCH_VERSION:-MOODLE_311}
              # CERTIFICATE_BRANCH_VERSION: ${CERTIFICATE_BRANCH_VERSION:-MOODLE_311_STABLE}
              # CUSTOMCERT_BRANCH_VERSION: ${CUSTOMCERT_BRANCH_VERSION:-MOODLE_404_STABLE}
              # DATAFLOWS_BRANCH_VERSION: ${DATAFLOWS_BRANCH_VERSION:-MOODLE_35_STABLE}
        volumes:
            - ./temp/var/www:/var/www:delegated
        # Copy files from build directory to www/html to mimic shared PVC copy in OpenShift (allows for multiple container instances)
        # Note: THis will add a few minutes to startup.
          # command: bash -c "cp /app/public /var/www/html -r && stdout_logfile=/dev/stdout && stdout_logfile_maxbytes=0 && stderr_logfile=/dev/stderr && stderr_logfile_maxbytes=0 && /usr/local/bin/docker-php-entrypoint"
        # or Without copy (to save some time if it doesn't need to be rebuilt)
        # command: bash -c "stdout_logfile=/dev/stdout && stdout_logfile_maxbytes=0 && stderr_logfile=/dev/stderr && stderr_logfile_maxbytes=0 && /usr/local/bin/docker-php-entrypoint"
        # command: tail -F anything # (to keep the container running)
        command: php-fpm
        healthcheck:
          # test: [
          #   "CMD-SHELL",
          #   "php-fpm-healthcheck.sh --listen-queue=10 --accepted-conn=5000 || kill 1"
          # ]
          test: [
            "CMD-SHELL",
            "php-fpm-healthcheck"
          ]
          interval: 10s
          timeout: 5s
          retries: 5
    cron:
        depends_on:
          db:
            condition: service_healthy
        env_file: example.env
        build:
            context: .
            dockerfile: CRON.Dockerfile
            args:
              DOCKER_FROM_IMAGE: ${IMAGE_REPO}${CRON_IMAGE:-php:8.3-cli}
              PHP_INI_ENVIRONMENT: ${PHP_INI_ENVIRONMENT:-production}
        volumes:
            - ./temp/var/www:/var/www:delegated
    # redis:
    #     image: ${REDIS_IMAGE:-redis:latest}

    redis-primary:
      image: redis:latest
      container_name: redis-primary
      hostname: redis-primary
      env_file:
          - example.env
      ports:
        - "6379:6379"
      volumes:
        - ./data/primary:/data
      command:
        [
          "redis-server",
          "--appendonly",
          "yes",
          "--repl-diskless-load",
          "on-empty-db",
          "--replica-announce-ip",
          "$${REDIS_HOST_IP}",
          "--replica-announce-port",
          "6379",
          "--protected-mode",
          "no",
          "--enable-debug-command",
          "yes"
        ]

    redis-secondary-1:
      image: redis:latest
      container_name: redis-secondary-1
      hostname: redis-secondary-1
      depends_on:
        - redis-primary
      env_file:
          - example.env
      ports:
        - "6380:6379"
      volumes:
        - ./data/secondary1:/data
      command:
        [
          "redis-server",
          "--appendonly",
          "yes",
          "--replicaof",
          "redis-primary",
          "6379",
          "--repl-diskless-load",
          "on-empty-db",
          "--replica-announce-ip",
          "$${REDIS_HOST_IP}",
          "--replica-announce-port",
          "6380",
          "--protected-mode",
          "no"
        ]

    redis-secondary-2:
      image: redis:latest
      container_name: redis-secondary-2
      hostname: redis-secondary-2
      depends_on:
        - redis-primary
      env_file:
          - example.env
      ports:
        - "6381:6379"
      volumes:
        - ./data/secondary2:/data
      command:
        [
          "redis-server",
          "--appendonly",
          "yes",
          "--replicaof",
          "redis-primary",
          "6379",
          "--repl-diskless-load",
          "on-empty-db",
          "--replica-announce-ip",
          "$${REDIS_HOST_IP}",
          "--replica-announce-port",
          "6381",
          "--protected-mode",
          "no"
        ]

    sentinel-1:
      image: redis:latest
      container_name: sentinel-1
      hostname: sentinel-1
      depends_on:
        - redis-primary
      env_file:
          - example.env
      ports:
        - "26379:26379"
      command: >
        sh -c 'echo "bind 0.0.0.0" > /etc/sentinel.conf &&
              echo "sentinel monitor mymaster $${REDIS_HOST_IP} 6379 2" >> /etc/sentinel.conf &&
              echo "sentinel resolve-hostnames yes" >> /etc/sentinel.conf &&
              echo "sentinel down-after-milliseconds mymaster 10000" >> /etc/sentinel.conf &&
              echo "sentinel failover-timeout mymaster 10000" >> /etc/sentinel.conf &&
              echo "sentinel parallel-syncs mymaster 1" >> /etc/sentinel.conf &&
              redis-sentinel /etc/sentinel.conf'

    sentinel-2:
      image: redis:latest
      container_name: sentinel-2
      hostname: sentinel-2
      depends_on:
        - redis-primary
      env_file:
          - example.env
      ports:
        - "26380:26379"
      command: >
        sh -c 'echo "bind 0.0.0.0" > /etc/sentinel.conf &&
              echo "sentinel monitor mymaster $${REDIS_HOST_IP} 6379 2" >> /etc/sentinel.conf &&
              echo "sentinel resolve-hostnames yes" >> /etc/sentinel.conf &&
              echo "sentinel down-after-milliseconds mymaster 10000" >> /etc/sentinel.conf &&
              echo "sentinel failover-timeout mymaster 10000" >> /etc/sentinel.conf &&
              echo "sentinel parallel-syncs mymaster 1" >> /etc/sentinel.conf &&
              redis-sentinel /etc/sentinel.conf'

    sentinel-3:
      image: redis:latest
      container_name: sentinel-3
      hostname: sentinel-3
      depends_on:
        - redis-primary
      env_file:
          - example.env
      ports:
        - "26381:26379"
      command: >
        sh -c 'echo "bind 0.0.0.0" > /etc/sentinel.conf &&
              echo "sentinel monitor mymaster $${REDIS_HOST_IP} 6379 2" >> /etc/sentinel.conf &&
              echo "sentinel resolve-hostnames yes" >> /etc/sentinel.conf &&
              echo "sentinel down-after-milliseconds mymaster 10000" >> /etc/sentinel.conf &&
              echo "sentinel failover-timeout mymaster 10000" >> /etc/sentinel.conf &&
              echo "sentinel parallel-syncs mymaster 1" >> /etc/sentinel.conf &&
              redis-sentinel /etc/sentinel.conf'

    redisinsight:
      image: redis/redisinsight:latest
      ports:
        - "5540:5540"
volumes:
    mysqldata: {}
